#!/bin/bash

# util command provides varies utility functions that can be used to minimize our workload.
# All those utility functions where listed in utils/ directory
# NOTE: To add new utility functions feel free to add it in utils/ directory

# BUG: while adding shebang,
# throws error '/bin/utils: line 146:  : bad substitution'
set -x
SCRIPT_NAME="Awesome Utility Functions"
SCRIPT_VER="0.1.0"
SCRIPT_OPTS=("(-d|--date):DATE")
SCRIPT_CATCHALL="yes" # Must be either "yes" or "no", enables a '_catchall' method executed when no command given

# Print Usage for CLI
function _help() {
	echo -e "${SCRIPT_NAME}\n"
	echo -e "-v|--version  To display script's version"
	echo -e "-h|--help     To display script's help"
	echo -e "-m|--methods  To display script's methods \n"
	echo -e "Available commands:\n"
	_available-methods | sort
	exit 0
}

# Print CLI Version
function _version() {
	echo -e "${SCRIPT_NAME}" 1>&2
	echo -en "Version " 1>&2
	echo -en "${SCRIPT_VER}"
	echo -e "" 1>&2
	exit 0
}

# List all the available public methods in this CLI
function _available-methods() {
	# use nullglob in case there are no matching files
	shopt -s nullglob
	METHODS=(${DOTFILES_PATH}/etc/utils/*)
	if [ -z "${METHODS}" ]; then
		echo -e "No methods found, this is script has a single entry point." 1>&2
	else
		echo -e "${METHODS}"
	fi
	exit 0
}

# Dispatches CLI Methods
function _handle() {
	METHOD=$(_available-methods 2>/dev/null | grep -Eoh "^${1}\$")
	if [ "x${METHOD}" != "x" ]; then
		${METHOD} "${@:2}"
		exit 0
	else
		# Call a Catch-All method
		if [ "${SCRIPT_CATCHALL}" == "yes" ]; then
			_catchall "${@}"
			exit 0
		# Display usage options
		else
			echo -e "Method '${1}' is not found.\n"
			_help
		fi
	fi
}

#
# User Implementation Begins
#
# Catches all executions not performed by other matched methods
function _catchall() {
	echo "Sorry, Something went wrong..."
	echo "util ${ARGS[*]} - FAILED"
	exit 0
}

# Read All Utiltiy functions from the Utils package

for files in ${DOTFILES_PATH}/etc/utils/*.sh; do
	source $files
done

#
# User Implementation Ends
# Do not modify the code below this point.
#
# Main Method Switcher
# Parses provided Script Options/Flags. It ensures to parse
# all the options before routing to a metched method.
#
# `<script> generate-autocomplete` is used to generate autocomplete script
# `<script> methods` is used as a helper for autocompletion scripts
ARGS=()
EXPORTS=()
while test $# -gt 0; do
	OPT_MATCHED=0
	case "${1}" in
	-h | --help)
		OPT_MATCHED=$((OPT_MATCHED + 1))
		_help
		;;
	-v | --version)
		OPT_MATCHED=$((OPT_MATCHED + 1))
		_version
		;;
	-m | --methods)
		OPT_MATCHED=$((OPT_MATCHED + 1))
		_available-methods
		;;
	*) # Where the Magic Happens!
		if [ ${#SCRIPT_OPTS[@]} -gt 0 ]; then for OPT in "${SCRIPT_OPTS[@]}"; do
			SUBOPTS=("${1}")
			LAST_SUBOPT="${1}"
			if [[ "${1}" =~ ^-[^-]{2,} ]]; then
				SUBOPTS=$(printf "%s" "${1}" | sed 's/-//' | grep -o .)
				LAST_SUBOPT="-${1: -1}"
			fi
			for SUBOPT in "${SUBOPTS[@]}"; do
				SUBOPT="$(printf "%s" ${SUBOPT} | sed -E 's/^([^-]+)/-\1/')"
				OPT_MATCH=$(printf "%s" ${OPT} | grep -Eoh "^.*?:" | sed 's/://')
				OPT_KEY=$(printf "%s" ${OPT} | grep -Eoh ":.*?$" | sed 's/://')
				OPT_VARNAME="OPTS_${OPT_KEY}"
				if [ -z "${OPT_VARNAME}" ]; then
					echo "Invalid Option Definition, missing VARNAME: ${OPT}" 1>&2
					exit 1
				fi
				if [[ "${SUBOPT}" =~ ^${OPT_MATCH}$ ]]; then
					OPT_VAL="${OPT_VARNAME}"
					OPT_MATCHED=$((OPT_MATCHED + 1))
					if [[ "${SUBOPT}" =~ ^${LAST_SUBOPT}$ ]]; then
						if [ -n "${2}" -a $# -ge 2 ] && [[ ! "${2}" =~ ^-+ ]]; then
							OPT_VAL="${2}"
							shift
						fi
					fi
					if [ -n "${!OPT_VARNAME}" ]; then OPT_VAL="${!OPT_VARNAME};${OPT_VAL}"; fi
					declare "${OPT_VARNAME}=${OPT_VAL}"
					EXPORTS+=("${OPT_VARNAME}")
					if [[ "${SUBOPT}" =~ ^${LAST_SUBOPT}$ ]]; then shift; fi
				fi
			done
		done; fi ;;
	esac # Clean up unspecified flags and parse args
	if [ ${OPT_MATCHED} -eq 0 ]; then if [[ ${1} =~ ^-+ ]]; then
		if [ -n "${2}" ] && [[ ! ${2} =~ ^-+ ]]; then shift; fi
		shift
	else
		ARGS+=("${1}")
		shift
	fi; fi
done

EXPORTS_UNIQ=$(echo "${EXPORTS[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')
for EXPORT in "${EXPORTS_UNIQ[@]}"; do
	if [[ "${EXPORT}" == *";"* ]]; then
		TMP_VAL=()
		for VAL in $(echo ${!EXPORT} | tr ";" "\n"); do TMP_VAL+=("${VAL}"); done
		eval ''${EXPORT}'=("'${TMP_VAL[@]}'")'
	fi
done

_handle "${ARGS[@]}"
exit 0
set +x