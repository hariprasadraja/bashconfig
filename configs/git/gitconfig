# References:
# 1. Git Aliases https://github.com/gitalias/gitalias
# 2. Use Vscode as a diff and merge tool https://roboleary.net/vscode/2020/09/15/vscode-git.html
# 2.
# check
[diff]
  tool = vscode

[difftool]
  prompt = false

[difftool "vscode"]
  cmd = code --disable-gpu --wait --reuse-window --diff $LOCAL $REMOTE

[merge]
  tool = vscode

[mergetool "vscode"]
  cmd = code --disable-gpu --wait --reuse-window $MERGED

[web]
  browser = google-chrome

[color]
  ui = auto

[color "branch"]
current = yellow bold
local = green bold
remote = cyan bold

[color "diff"]
  meta = 11
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse
  commit = yellow bold

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22

[color "status"]
  added = green bold
  changed = yellow bold
  untracked = red bold

# Include email address and password via command
[sendemail]
  smtpencryption = tls
  smtpserver = smtp.gmail.com
  smtpserverport = 587

[core]
  editor = micro # alias for micro editor https://micro-editor.github.io/
  whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
  pager = delta
  # pager = diff-so-fancy | less --tabs=4 -RFX

[delta]
    features = side-by-side line-numbers decorations
    syntax-theme = Dracula
    plus-style = syntax "#003800"
    minus-style = syntax "#3f0001"

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none
    hunk-header-decoration-style = cyan box ul

[delta "line-numbers"]
    line-numbers-left-style = cyan
    line-numbers-right-style = cyan
    line-numbers-minus-style = 124
    line-numbers-plus-style = 28

[interactive]
  diffFilter = delta --color-only

[alias]

  # # log the commit with the changes made on those commit
  log-changes = "log --stat --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

  # # log with a text-based graphical representation of the commit history.
  log-graph = "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit --decorate --boundary"

  # # log with a text-based graphical representation of commit histroy in topological order.
  # # topological order shows parent commits at the bottom of it's child commits.
  log-graph-topo = log --graph --topo-order --abbrev-commit --date=short --decorate --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset %Cblue%G?%Creset'

  # # Show log of changes, most recent first
  log-line = log --graph --oneline --decorate

  # # Show log of new commits after you fetched, with stats, excluding merges
  log-fetched = log ORIG_HEAD.. --stat --decorate

  # # Show log with dates in our local timezone
  log-time-local = log --date=local

  # # Show the log for my own user email
  log-me = !git log --author $(git config user.email)

  # # Show the date of the earliest commit, in strict ISO 8601 format
  log-first-date = !"git log --date-order --format=%cI | tail -1"

  # # Show the date of the latest commit, in strict ISO 8601 format
  log-last-date = log -1 --date-order --format=%cI

  # # Show the recent day
  log-since-yesterday = log --since yesterday

  # # Summarize your own changes since yesterday, suitable for a daily standup meeting.
  log-standup = !git log --since yesterday --author $(git config user.email) --oneline --decorate
  log-me-since-yesterday = !git log --since yesterday --author $(git config user.email) --oneline --decorate


  status-short = status --short

  # # status with short format and showing branch and tracking info.
  status-short-all = status --short --branch
